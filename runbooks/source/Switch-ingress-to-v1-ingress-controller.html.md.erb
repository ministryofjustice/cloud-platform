---
title: Switch ingress to v1 supported ingress-controller
weight: 420
last_reviewed_on: 2022-03-23
review_in: 3 months
---

# <%= current_page.data.title %>

## Introduction

Service teams using the Cloud Platform are asked to switch to the new instance of ingress controllers created with version >1.0. It is an important step for the upcoming Kubernetes 1.22 upgrade.

The upcoming Kubernetes 1.22 upgrade will remove several deprecated APIs that are relevant to networking:

  * the networking.k8s.io/v1beta1 API version of IngressClass
  * all beta versions of Ingress: extensions/v1beta1 and networking.k8s.io/v1beta1

To support Ingress the v1 API version, we have two new instances of the Ingress-NGINX controllers deployed with version >1.0.

Switching to the new NGINX-Ingress controllers is **required** before the Cloud Platform Kubernetes cluster can be upgraded from **1.21** to **1.22**.

### What has caused this change:

There are 2 reasons primarily.

Reason #1

Until K8s version 1.21, it was possible to create an Ingress resource using deprecated versions of the Ingress API, such as:

  . extensions/v1beta1
  . networking.k8s.io/v1beta1

You would get a message about deprecation, but the Ingress resource would get created.

From K8s version 1.22 onwards, you can only access the Ingress API via the stable, networking.k8s.io/v1 API.

Reason #2

If you are on the existing Ingress-NGINX controller and then upgrade to K8s version v1.22 , there are several scenarios where your existing Ingress objects will not work how you expect. 


### Switch to the new ingress controllers and convert an Ingress to the v1 API

Currently cloud-platform have four instances of the Ingress-NGINX controllers(2 existing instances of ingress controller and 2 new instances of ingress controllers with version >1.0, to support Ingress the v1 API version) running on the cluster, all instances of the controllers must be aware of which Ingress objects they serve. 
The ingressClassName field of an Ingress is the way to let the controller know about that.

- Switch to the new ingress controller using the .spec.ingressClassName field. Set value to <b>modsec</b> if you use modsec, else set it to <b>default</b>

Details of the changes required for converting the ingress to use the networking.k8s.io/v1 Ingress API

- Delete the annotation line with `kubernetes.io/ingress.class`, this is replaced by `ingressClassName` under spec
- The backend `serviceName` field is renamed to `service.name`
- Numeric backend `servicePort` fields are renamed to `service.port.number`
- String backend `servicePort` fields are renamed to `service.port.name`
- `pathType` is now required for each specified path. Options are `Prefix`, `Exact`, and `ImplementationSpecific`. 
   To match the undefined `v1beta1` behavior, use `ImplementationSpecific`.
- `spec.backend` is renamed to `spec.defaultBackend`

### Resources deployed using kubectl

If your ingress manifest looks similar to below:

<pre>
apiVersion: <b>networking.k8s.io/v1beta1</b> OR  <b>extensions/v1beta1</b>
kind: Ingress
metadata:
  name: helloworld
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: helloworld-mynamespace-green
    external-dns.alpha.kubernetes.io/aws-weight: "100"
spec:
  tls:
  - hosts:
    - helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
  rules:
  - host: helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
    http:
      paths:
      - <b>path: /
        backend:
          serviceName: helloworld
          servicePort: 4567</b>
</pre>

Switch to the new ingress controller and convert the ingress to use the <b>networking.k8s.io/v1</b> API version.

To Switch to the new ingress controller:

 * Add `ingressClassName:` under spec, set to <b>modsec</b> if you use modsec, else set it to <b>default</b>

To Convert the ingress to use the <b>networking.k8s.io/v1</b> API version:

 * Change the `apiVersion` to `networking.k8s.io/v1`
 * Add `pathType: ImplementationSpecific` after `path: /`
 * Rename `-backend.serviceName` to `-backend.service.name`
 * for String servicePort rename `-backend.servicePort` to `-backend.service.port.name`
 * For Numeric servicePort rename `-backend.servicePort` to `-backend.service.port.number`

The manifest after changes will look like:

<pre>
apiVersion: <b>networking.k8s.io/v1</b>
kind: Ingress
metadata:
  name: helloworld
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: helloworld-mynamespace-green
    external-dns.alpha.kubernetes.io/aws-weight: "100"
spec:
  ingressClassName: <b>default</b> OR <b>modsec</b>
  tls:
  - hosts:
    - helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
  rules:
  - host: helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
    http:
      paths:
      - path: /
        <b>pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              number: 4567</b>
</pre>

**NOTE: From version >1.0 of the Ingress-NGINX Controller, an IngressClass object is required.
If you aleady converted your existing ingress to v1, please add `ingressClassName:` under spec, set to "modsec" if you use modsec, else set it to "default", to switch to the new ingress controllers**

To apply your changes:

```kubectl apply --filename ingress.yaml --namespace <namespace>```


### Resources deployed using helm chart

**NOTE** - Check the helm version

The Cloud Platform kubernetes version 1.21 is compatible with helm version 3.5.x so make sure you have the 
correct version installed before updating the manifest. If you are on older helm versions, you might get an error as below:

```
Error: UPGRADE FAILED: rendered manifests contain a new resource that already exists. 
Unable to continue with update: existing resource conflict: namespace: XXX, name: YYYY,
existing_kind: networking.k8s.io/v1, Kind=Ingress, new_kind: networking.k8s.io/v1, Kind=Ingress
```

If your ingress manifest looks similar to below:

<pre>
{{- if .Values.ingress.enabled -}}
{{- $fullName := include "app.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: <b>networking.k8s.io/v1beta1</b>
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  tls:
  {{- range .Values.ingress.hosts }}
  - hosts:
    - {{ .host }}
    {{ if .cert_secret }}secretName: {{ .cert_secret }}{{ end }}
  {{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ .host }}
      http:
        paths:
          - <b>path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http</b>
  {{- end }}
{{- end }}
</pre>

The manifest after changes will look like:

<pre>
  {{- if .Values.ingress.enabled -}}
{{- $fullName := include "app.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: <b>networking.k8s.io/v1beta1</b>
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  tls:
  {{- range .Values.ingress.hosts }}
  - hosts:
    - {{ .host }}
    {{ if .cert_secret }}secretName: {{ .cert_secret }}{{ end }}
  {{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ .host }}
      http:
        paths:
          - <b>path: {{ $ingressPath }}
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $fullName }}
                port: 
                  name: http</b>
  {{- end }}
{{- end }}

</pre>

To apply your changes:

```
helm upgrade -f <values-file.yaml> <your-release> <your-chart> --namespace <your-namespace>
```

**IMP NOTE: There will be downtime of up to 5-10 minutes while switching to the new ingress controller following the process described [above][switch-guidence],  
alternatively you can follow the below steps to switch to the new ingress controller without any downtime.**

### Switch to the new ingress controller with zero downtime

These steps describe how to switch without any downtime. Initially, we will strongly suggest teams switch their 'development' ingress so that any issues can be ironed out before affecting the production service.

#### Step 1 - Amend and apply your current ingress resource

You must set `external-dns.alpha.kubernetes.io/aws-weight` value to "0" for the current ingress. This does not mean traffic will stop, 0 is a valid value for a single ingress.

<pre>
apiVersion: <b>networking.k8s.io/v1beta1</b> OR  <b>extensions/v1beta1</b>
kind: Ingress
metadata:
  name: helloworld
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: helloworld-mynamespace-green
    external-dns.alpha.kubernetes.io/aws-weight: "0"
spec:
  tls:
  - hosts:
    - helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
  rules:
  - host: helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
    http:
      paths:
      - <b>path: /
        backend:
          serviceName: helloworld
          servicePort: 4567</b>
</pre>

#### Step 2 - Add a new ingress resource

Create a new Ingress with a different ingress name to the existing one, following the process below to convert Ingress to the v1 API.

Main changes include: 

 - Update the ingress name different to the existing one
  * name: helloworld-new

 - Update set-identifier annotation, to match with the new ingress name
  * external-dns.alpha.kubernetes.io/set-identifier: helloworld-new-mynamespace-green

 - Update aws-weight annotation to "100"
  * external-dns.alpha.kubernetes.io/aws-weight: "100"

To Switch to the new ingress controller:

 * Add `ingressClassName:` under spec, set to <b>modsec</b> if you use modsec, else set it to <b>default</b>

To Convert the ingress to use the <b>networking.k8s.io/v1</b> API version:

 * Change the `apiVersion` to `networking.k8s.io/v1`
 * Add `pathType: ImplementationSpecific` after `path: /`
 * Rename `-backend.serviceName` to `-backend.service.name`
 * for String servicePort rename `-backend.servicePort` to `-backend.service.port.name`
 * For Numeric servicePort rename `-backend.servicePort` to `-backend.service.port.number`

The new manifest after changes will look like:

<pre>
apiVersion: <b>networking.k8s.io/v1</b>
kind: Ingress
metadata:
  name: helloworld-new
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: helloworld-new-mynamespace-green
    external-dns.alpha.kubernetes.io/aws-weight: "100"
spec:
  ingressClassName: <b>default</b> OR <b>modsec</b>
  tls:
  - hosts:
    - helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
  rules:
  - host: helloworld-app.apps.live.cloud-platform.service.justice.gov.uk
    http:
      paths:
      - path: /
        <b>pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              number: 4567</b>
</pre>

To apply the changes to the ingress, as a quick alternative to running your application's CI/CD pipeline, you can apply them directly:

```bash
kubectl -n <namespace-name> apply -f ingress-new.yaml
```

##### Verify traffic sent to the new ingress

After you have applied new ingress with `external-dns.alpha.kubernetes.io/aws-weight` value set to "100", you can verify the traffic sent to the new ingress using [grafana][grafana-live]

Get the "hostname" used in your ingress for your namespace

```bash
  kubectl get ingress <ingress-name> -n <namespace-name> -o json | jq -r '.items[] | .spec.rules[].host'
```

Using the "hostname" from the above command, make a cURL call every 5 seconds to send traffic to your service

```bash
  while sleep 5; do curl -I https://<host-name>; done
```

To view your ingress traffic, login to [grafana-live][grafana-live], in `Kubernetes-ingress traffic` dashboard, select your `ingress-name` and `namespace-name` from the drop-down and do a search, you will see traffic for your new ingress.

Your new ingress is successfully switched to the new ingress controller.

#### Step 3 - Cleanup old ingress

Once you have successfully switched to the new ingress controller using the v1 API version manifest, you can tidy up by deleting the old ingress and updating your CI pipeline/job with new ingress manifest that deploys
to the cluster.

**NOTE: If you don't update your manifest to switch to the new ingress controller and convert the ingress to use the latest API versions after we upgraded to Kubernetes 1.22, 
you will get failures when deploying your application.**


### Getting help

If you have any questions, please contact us on [#ask-cloud-platform] Slack channel.

[#ask-cloud-platform]: https://mojdt.slack.com/messages/C57UPMZLY
[grafana-live]: https://grafana.live.cloud-platform.service.justice.gov.uk/d/f1e13059dfd23fdcaf479f4fa833f92610c2dfa5/kubernetes-ingress-traffic?orgId=1
[grafana-live-1]: https://grafana.live-1.cloud-platform.service.justice.gov.uk/d/f1e13059dfd23fdcaf479f4fa833f92610c2dfa5/kubernetes-ingress-traffic?orgId=1
[switch-guidence]: https://runbooks.cloud-platform.service.justice.gov.uk/Switch-ingress-to-v1-ingress-controller.html#switch-to-the-new-ingress-controllers-and-convert-an-ingress-to-the-v1-api
