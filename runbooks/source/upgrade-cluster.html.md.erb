---
title: Upgrade a cluster
weight: 52
---

# Upgrade a cluster

## Pre-requisites

Before you begin, there are a few pre-requisites:

- Your GPG key must be added to the [infrastructure repo] so that you are able to run `git-crypt unlock`.

- You have the [AWS CLI] profile `moj-cp` with suitable credentials.

- You have [docker] installed.

### Setup environment

Setup the environment variables listed in `example.env.create-cluster` in the [infrastructure repo].

### Run integration tests

Run the [integration test pipeline] and wait for the tests to pass. This will ensure the live cluster is functioning as expected. 

### Sanity checks

Ensure Concourse pipelines are green, and pause all of them.

Take a snapshot of

- all non-running pods; you can do this by running `kubectl get pods -A | grep -v "Running"`.
- triggered Prometheus alarms; take a screenshot of the current triggered alarms.

### Run a shell in the tools image

The cloud platform [tools image] has all the software required to run the build script and create a cluster.

The image will need updates for new client tool versions, see https://github.com/ministryofjustice/cloud-platform-tools-image/pull/34 for an example. Make the required changes and push the new image to DockerHub. 

From a local copy of the cloud-platform-infrastructure repository, run the following command (ensuring that you're using the new image): 

```bash
make tools-shell
```

## Run the upgrade

### Authenticate to the cluster

Within the tools image, the file `~/.kube/config` is not copied from your outside profile, create it for just the needed cluster by running

```bash
kops export kubecfg XXXXXXX.cloud-platform.service.justice.gov.uk
```

### Update the live cluster manifest

Open the cloud-platform-infrastructure repository and make the following changes to the kops/live-1.yaml manifest:

  - The Kubernetes release version, ensuring it is supported by Kops - verify on the [kops releases](https://github.com/kubernetes/kops/releases) page.
  - The AMI in each instance group. This can be found here: https://github.com/kubernetes/kops/blob/master/channels/stable 

Now make the same changes to the template file `./terraform/cloud-platform/templates/kops.yaml.tpl`.

### Push changes to kops state

Run the following to push the above changes to the kops state store in S3.

`kops update cluster`

Review the changes before committing with: 

`kops update cluster -yes`

### Perform a rolling-update

This is a delicate procedure, so this article will proceed with extreme caution. 

First, get the instance groups:

`kops get ig`

Update each master individually:

`kops rolling-update cluster --instance-group <master-instance-group> (--yes)`

Kops will safely eject the instance from the cluster and bring back a new one. 

Once the new master is in a `ready` state, run the fast integration tests with:

```
cd cloud-platform-infrastructure/smoke-tests
make test-fast
```

This will take around 30 seconds and should pass.

Note: During an upgrade, we had an issue where kube-system namespace label got removed, which resulted in OPA webhook restrict applying daemonsets to master node. If the above "test-fast" fail for that reason, apply the annotation back form [here][kube-system-ns]

Perform the same process on the other two masters.

### Take stock of current running worker nodes

You'll need a file with all current working worker nodes. Run to output all workers to a text file:

```
kubectl get nodes | grep node | sed 's/ .*//' > nodes
```

### Create new worker instance group

To ensure minimal application downtime, we're going to create a new instance group with the changes applied to the live manifest above:

```
kops create instancegroup nodes-<kubernetes-version>
kops update cluster
kops update cluster --yes
```
note: we use the kubernetes-version to identify the new node group. 

New instances will be created, which you'll see with:

```
watch kubectl get nodes
```

We have multiple worker instance groups. Perform the same process on the other node instance groups.

### Cordon old workers

Copy the file we created earlier:

```
cp nodes cordon_nodes
```

We need to insert the following before each line in this file:

`kubectl cordon`

To do this quickly in vim I used: 

```
qq shift+i “kubectl cordon ” esc j ^ q G@q
```

### Scale number of ingress controllers

The ingress controllers play in important role in a live cluster. To ensure these are running on the new nodes run:

```
kubectl -n ingress-controllers edit deploy nginx-ingress-acme-controller
```

And double the number of replicas. 

### Drain the old worker nodes

We now need to move all pods on the old worker nodes to the new. To do this first copy the nodes file we created earlier:

```
cp nodes drain_nodes
```

We need to insert the following before each line in this file:

`kubectl drain`

and then

` --ignore-daemonsets --delete-local-data`

at the end.

To do this quickly in vim I used: 

```
qq shift+i “kubectl drain ” esc shift+a “--ignore-daemonsets --delete-local-data” esc j ^ q G@q
```

Execute the commands in the file with:

```
bash drain_nodes
```

Each node will drain all pods, moving them onto the new workers.

### Validate the cluster

Ensure all nodes have joined the cluster:

```
kops validate cluster
```

### Run integration tests again

Run the [integration test pipeline] and wait for the tests to pass. This will ensure you're live cluster is functioning as expected. 

### Delete the old instance group

When complete and all pods have migrated onto the new workers. Delete the older instance group:

### Scale the ingress-controllers down

We can now scale the ingress-controllers back down. 

```
kubectl -n ingress-controllers edit deploy nginx-ingress-acme-controller
```

## Commit changes back to master

Any changes made to the cloud-platform-infrastructure repository should be pushed for review. This includes manifest changes and image tag changes. 

[infrastructure repo]: https://github.com/ministryofjustice/cloud-platform-infrastructure
[integration test pipeline]: https://concourse.cloud-platform.service.justice.gov.uk/teams/main/pipelines/integration-tests/jobs/apply-tests-live-1
[cluster naming policy]: https://github.com/ministryofjustice/cloud-platform/blob/master/architecture-decision-record/009-Naming-convention-for-clusters.md
[AWS CLI]: https://aws.amazon.com/cli/
[docker]: https://www.docker.com/
[PagerDuty]: https://www.pagerduty.com/
[tools image]: https://github.com/ministryofjustice/cloud-platform-tools-image
[kube-system-ns]: https://github.com/ministryofjustice/cloud-platform-environments/blob/master/namespaces/live-1.cloud-platform.service.justice.gov.uk/kube-system/00-namespace.yaml

