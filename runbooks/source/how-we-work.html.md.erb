---
title: How We Work
weight: 10
last_reviewed_on: 2025-10-07
review_in: 6 months
---

# <%= current_page.data.title %>

This page describes the tasks and duties of members of the Cloud Platform (CP) team, and explains some of our working practices.

## Getting Help

If you need help at any point, don't hesitate to ask the team. Among other things, you can:

* Post in #cloud-platform explaining the problem
* Post in #cloud-platform asking for someone to pair-program with you
* Mention the issue during the daily standup

## Sprints and ceremonies

We work in two-week sprints - these are usually product-led.
Our team ceremonies include: daily stand up at 10:30am on Teams, sprint demo, retrospective and planning every fortnight on Wednesday PM.

### Firebreak
For 1 sprint every quarter, we have a Firebreak sprint. Firebreaks are team-led and provide team members the opportunity to work on tickets that are of interest to them and also of value to the organisation such as:

1. Prototyping innovative new features
2. Try out new technologies
3. Address technical debt

As with our usual sprint, at the end of the firebreak sprint, we showcase and demo our progress and learning to the team and other interested parties.
[find out more about firebreaks on GOV.UK](https://insidegovuk.blog.gov.uk/2018/05/03/firebreaks-on-gov-uk/)

## Story
Stories/Tickets are an item of work and should have enough information that all team members know what is required. When creating a new ticket, please use the appropriate template for a [support request](https://github.com/ministryofjustice/cloud-platform/blob/main/.github/ISSUE_TEMPLATE/cloud-platform-support-request.md) [story](https://github.com/ministryofjustice/cloud-platform/blob/main/.github/ISSUE_TEMPLATE/cloud-platform-story-template.md) or [firebreak story](https://github.com/ministryofjustice/cloud-platform/blob/main/.github/ISSUE_TEMPLATE/cloud-platform-firebreak-template.md).


## The Board / Tickets

We use a Scrum process to manage our backlog of work on this [Github Project board], which aggregates GitHub Issues from the various CP team repositories.

During the sprint, the process of getting work done should look like this:

* Assign the topmost ticket (i.e. github issue) of the "This Sprint" column to yourself, and move it to the "In Progress" column
* Create a new branch in each affected github repository and make whatever changes are necessary
* Raise a pull request (PR), and get at least one other CP team member to review your changes (two reviews are required for infrastructure PRs).
* After your PR has been approved, merge it and, if necessary, apply your changes using terraform or whatever else is required to apply your change to our infrastructure
* Move the ticket into review for another team member to review.
* Once reviewed, move the github issue to done, and move on to the next ticket
* If you cannot work on a ticket as you are waiting on someone else, move the ticket to blocked and start work or help on another ticket.

### Running out of tickets mid sprint

If there are no more tickets in Todo to pick up:

* Ask in stand up or the team channel if anyone needs any help or pairing, the priority should always be to finish all tickets in sprint before bringing anything else in
* Do any mandatory learning or use your 10% time
* Help the support team with their tasks, such as dependabot or document reviews
* If everything above is done, discuss with the team bringing more work into sprint (do not bring things into sprint without asking)

### Adding tickets to the backlog

Anyone in the team is encouraged to add new tickets at any time. So if you think of something we ought to do, please [raise a ticket](https://github.com/ministryofjustice/cloud-platform/issues/new/choose) for it.

#### Support tickets

If the time spent working on a non-ticketed issue or request *such as from the '#ask-cloud-platform' channel*, is more than 15 minutes:

* The team member working on the issue will create a ticket <%# and estimate the ticket based on complexity, using the agreed criteria for story points %>.
* Where appropriate, ask the user who raised the issue to create a ticket.

### Development Principles

Please read these [Development Principles](https://technical-guidance.service.justice.gov.uk/documentation/principles/development-principles.html) for how we prefer to work on code.

### Reviewing/Merging PRs

* Whoever raises a PR is responsible for getting someone to review it, and for merging it after it has been approved
* Please be pro-active about reviewing other team members' PRs
* When reviewing a PR, please add a "reaction" emoji to the corresponding slack message, so that other team members know you're doing so. This avoids duplicated effort. We tend to use üëÄ to show we're reviewing a PR, and/or ‚úî when we've approved it.

## Support rota
We have a support rota to manage the support requests and alerts that come in. The support rota consists of one team member taking on the hammer role assisted by a secondary support member who are responsible for the below in order of priority:

- Acknowledging and invoking the team to high-priority alerts in the `#high-priority-alarms` slack channel during support hours
- The üî® Hammer of Justice
- Acknowledging and responding to alerts in the `#lower-priority-alarms` slack channel which include
    - Alerts related to the platform - lower priority alarms which are triggered from Prometheus, AWS, and Pingdom
    - Alerts from concourse pipelines related to Integration tests, infrastructure and divergence
    - Alerts from concourse pipelines related to [environments repository] i.e apply-namespace, apply-live
    - Any other alerts from concourse pipelines
- Actions from the How out of date are we? report i.e. (e.g. reviewing documentation pages, or __carefully__ destroying orphaned AWS resources)
- Open Dependabot PRs raised against the `cloud-platform` repositories, which are managed in our GitHub Project [here](https://github.com/orgs/ministryofjustice/projects/65/views/16)
- Any issues from [link checker report]

### The üî® Hammer of Justice

The origin of the name is lost, but it sounds a lot more fun than "support manager" üòè

We designate one member of the team to be the Hammer on each working day. There is a rota so that we all take a turn.

The Hammer is responsible for:

* Ensuring questions/problems in the `#ask-cloud-platform` slack channel are being worked on, and that users receive frequent updates until a problem is resolved
* Ensuring that users' PRs raised against the [environments repository] are reviewed in a timely fashion

It is **not** the Hammer's job to **answer** every query in the channel or **review** every PR

It **is** the Hammer's job to ensure that all queries are handled, and that PRs are reviewed. This may involve asking other team members for help with particular queries where they have relevant expertise, or if there are more queries coming in than you can handle.

Anyone can (and should) respond to queries in `#ask-cloud-platform`, and review PRs. You don't have to be the Hammer to help.

#### Sprint Tickets

Do not work on tickets in the sprint when you're the Hammer. The constant context switching makes it hard to get significant work done,
and there is also the risk that questions go unanswered and PRs get blocked waiting for review because you're head down in a problem and don't notice them.

### Secondary Support

The secondary support role is to cover other support work (not covered by the Hammer) and to support the Hammer where needed.

#### Support Tickets

Support tickets are created by users of Cloud Platform for various reasons. These can be anything from

- a request for help with a technical problem
- a request for a new feature or service
- setting up Alertmanager Receiver
- setting up pingdom integration

Support tickets are triaged by the team during standup. If the support ticket is a quick change e.g. for setting an Alertmanager receiver, the ticket should be added to the todo list for the sprint at the apprporiate place in the priority order and picked up by an team. meber in its turn.

If the ticket is too large, too complex or involves some investigation work, then it will be added to tge product backlog and will be brought into a future sprint.

When working on a support ticket, ensure that the ticket is updated with the progress and the user is informed.

#### Documentation

Most of our user-facing documentation is in the [user guide], and documentation for the team is in the [runbooks] site.

There are also a lot of important `README.md` files like [this one](https://github.com/ministryofjustice/cloud-platform#ministry-of-justice-cloud-platform-master-repo), especially for our terraform modules.
We also have code samples like [this](https://github.com/ministryofjustice/cloud-platform-terraform-rds-instance/blob/main/examples/rds-postgresql.tf) for each of our terraform modules.

It is important to keep all of this up to date as the underlying code changes, so please remember to factor this in when estimating and working on tickets.

There is currently a list of documents which are overdue for review that are reguarly top the team slack channel . Please feel free to review any of the documents listed, and raise a PR making any updates (including updating the `last_reviewed_on` date).

[Github Project board]: https://github.com/orgs/ministryofjustice/projects/65
[environments repository]: https://github.com/ministryofjustice/cloud-platform-environments
[user guide]: https://user-guide.cloud-platform.service.justice.gov.uk
[runbooks]: https://runbooks.cloud-platform.service.justice.gov.uk
[How out of date are we?]: https://reports.cloud-platform.service.justice.gov.uk/dashboard
[link checker report]: https://github.com/ministryofjustice/cloud-platform/issues?q=is%3Aissue+is%3Aopen+Link+Checker+Report
