---
title: Rotate User AWS Credentials
weight: 100
last_reviewed_on: 2020-08-13
review_in: 3 months
---

# Rotate User AWS Credentials

Use this runbook if a user's AWS credentials have been exposed. In this case, 'AWS credentials' refers to credentials created by terraform, for resources in the user's namespace.

We will make terraform destroy the compromised credentials, and then recreate them. For this example, we will use the case where an AWS credential for an ECR in the my-namespace namespace was exposed.

**Please amend the code snippets below to match your actual circumstance.**

#### 1. Prepare terraform to manipulate the user's AWS resources

You need a working copy of the environments [github repo][env-repo].

```bash
$ cd cloud-platform-environments/namespaces/live-1.cloud-platform.service.justice.gov.uk
$ cd my-namespace/resources
```

Terraform needs AWS credentials to access the state files on S3.

If you have an AWS profile defined for the cloud platform AWS account, you can run:

```bash
export AWS_PROFILE=[profile name in ~/.aws/credentials]`
```

If not, export the key and secret like this:

```bash
$ export AWS_ACCESS_KEY_ID=[your access key]
$ export AWS_SECRET_ACCESS_KEY=[your secret key]
```

Then you should be able to run terraform init, targeting the relevant namespace:

```bash
$ terraform init \
  -backend-config="bucket=cloud-platform-terraform-state" \
  -backend-config="key=cloud-platform-environments/live-1.cloud-platform.service.justice.gov.uk/my-namespace/terraform.tfstate" \
  -backend-config="region=eu-west-1" \
  -backend=true \
  -get=true \
  -input=false

$ terraform plan
```

The final `terraform plan` should output `No changes. Infrastructure is up-to-date.`

### 2. Identify the compromised terraform object

```bash
$ terraform show | less
```

Look for the compromised access key. In this case, the access key was AKIA27HJSWAHHIG5ACYA, and it occurs in two places in the output.

```
...
kubernetes_secret.ecr-repo-my-repo:
  id = my-namespace/ecr-repo-my-repo
  data.% = 3
  data.access_key_id = AKIA27HJSWAHHIG5ACYA
  data.repo_url = ...
  data.secret_access_key = ...
...
module.ecr-repo-my-repo.aws_iam_access_key.key:
  id = AKIA27HJSWAHHIG5ACYA
  secret = ...
  ses_smtp_password = ...
...
```

The first occurence is when terraform stores the credentials in a kubernetes secret.

The second occurence is the one we want, where terraform creates the credentials (the `aws_iam_access_key.key` resource, for the ECR repo).

### 3. Destroy the compromised key

```bash
$ terraform destroy --target=module.ecr-repo-my-repo.aws_iam_access_key.key
```

If this looks like it's going to do the right thing, enter 'yes' to confirm.

```
An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  - module.ecr-repo-my-repo.aws_iam_access_key.key


Plan: 0 to add, 0 to change, 1 to destroy.
```

### 4. Let terraform create a new key

```bash
$ terraform plan
```

This should report that it will **create** a new `aws_iam_access_key.key` resource and **modify** the corresponding `kubernetes_secret` resource.

```
An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  ~ kubernetes_secret.ecr-repo-my-repo
      data.%:                 "" => <computed>
      data.access_key_id:     "AKIA27HJSWAHHIG5ACYA" => ""
      data.repo_url:          "..." => ""
      data.secret_access_key: "..." => ""

  + module.ecr-repo-my-repo.aws_iam_access_key.key
      id:                     <computed>
      encrypted_secret:       <computed>
      key_fingerprint:        <computed>
      secret:                 <computed>
      ses_smtp_password:      <computed>
      status:                 <computed>
      user:                   "ecr-user-0000000000000000"


Plan: 1 to add, 1 to change, 0 to destroy.
```

If all is well:

```bash
$ terraform apply
```

If this looks like it's going to do the right thing, enter 'yes' to confirm.

At this point, a new set of AWS credentials should have been created for the existing IAM user, and the kubernetes secret should contain the new access key and secret.

[env-repo]: https://github.com/ministryofjustice/cloud-platform-environments
