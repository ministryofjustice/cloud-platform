---
title: EKS Tool/Manager Cluster
weight: 350
last_reviewed_on: 2020-01-06
review_in: 3 months
---

# Provisioning EKS clusters

For the time being EKS is only used for the tools cluster, it mainly holds the Cloud Platform concourse CI and the Prometheus federation. 

## Pre-requisites 

- Make sure you've access to Cloud Platform AWS account
- Set your environment variables (you might also want to include `AWS_*` envs):

```
    export KOPS_STATE_STORE=s3://cloud-platform-kops-state
    export AWS_PROFILE=moj-cp
```

## Provisioning

### 1. VPC

We need to create a VPC where to deploy the cluster, VPCs are deployed using terraform and its code-base can be found in [cloud-platform-infrastructure/terraform/cloud-platform-network](https://github.com/ministryofjustice/cloud-platform-infrastructure/tree/master/terraform/cloud-platform-network) folder

```
terraform init
terraform workspace new <WorkspaceName>
terraform apply
```

You should be able to see your new VPC (called `WorkspaceName`) inside the AWS Console. Check it before jumping to the next step.

**NOTE**: For conventions purposes please call all terraform workspaces the same

### 2. Creating EKS cluster

Now it's time to provision the cluster itself, for that we change directory to to [cloud-platform-infrastructure/terraform/cloud-platform-eks](https://github.com/ministryofjustice/cloud-platform-infrastructure/tree/master/terraform/cloud-platform-eks) and follow very similar terraform workflow:

```
terraform init
terraform workspace new <WorkspaceName>
terraform apply -var cluster_node_count="4" -var worker_node_machine_type="m4.large"
```

You adapt the variables `cluster_node_count` and `worker_node_machine_type` in base of your needs. 

Once terraform finishes you should be able to find the kubeadmin file (used by _kubectl_ to establish a connection to the cluster) within the `files/` folder and it should be named as `files/kubeconfig_${WorkspaceName}`.

Final check for this step consists in cluster connection, for that we use the _kubeconfig_ file created by the EKS terraform module: 

(**NOTE**: Update the `${WorkspaceName}` variable with your workspace name)

```
$ export KUBECONFIG="$(pwd)/files/kubeconfig_${WorkspaceName}"
$ kubectl cluster-info
Kubernetes master is running at https://B04C5FC7828A0515457E141A9610815D.sk1.eu-west-2.eks.amazonaws.com
CoreDNS is running at https://B04C5FC7828A0515457E141A9610815D.sk1.eu-west-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

```

### 3. Deploy components

Components installation is the last step, for that we need to have the `KUBECONFIG` variable exported and make sure you have access to the cluster. To deploy components we go to [cloud-platform-infrastructure/terraform/cloud-platform-eks/components](https://github.com/ministryofjustice/cloud-platform-infrastructure/tree/master/terraform/cloud-platform-eks/components) and follow exactly the same terraform workflow:

```
terraform init
terraform workspace new <WorkspaceName>
terraform apply
```

### 4. Delete the EKS cluster

Follow these steps, to delete the EKS cluster.

First, set the kubectl context for the EKS cluster you are deleting. The easiest way to do this is with aws command:

```
$ export KUBECONFIG=~/.kube/config
$ aws eks --region eu-west-2 update-kubeconfig --name <cluster-name>
```

You should see this output:

```
Added new context arn:aws:eks:eu-west-2:754256621582:cluster/<cluster-name> to .kube/config

```

Then, from the components directory, run these commands to destroy all cluster components, and delete the terraform workspace.

```
$ cd terraform/cloud-platform-eks/components
$ terraform init
$ terraform workspace select <clusterName e.g. tools-cluster-eks>
$ terraform destroy
$ terraform workspace select default
$ terraform workspace delete <clusterName>
```

Change directories and perform the following to destroy the EKS cluster, and delete the terraform workspace.

```
$ cd ../cloud-platform-eks
$ terraform init
$ terraform workspace select <clusterName e.g. tools-cluster-eks>
$ terraform destroy
$ terraform workspace select default
$ terraform workspace delete <clusterName>
```

## TODO

- It would be nice to have similar script to [`create-cluster.rb`](https://github.com/ministryofjustice/cloud-platform-infrastructure/blob/master/create-cluster.rb) (or add to it support for EKS) that creates the whole process in one command.